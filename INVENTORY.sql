





describe table DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW;

----Updating old room names in Biotrack
select *
from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW
where FACILITY = 'Encanto'
--where PLANT_PLACEMENT in ('2020-01-16', '2020-01-02', '2019-12-20')
  --and FACILITY = 'Encanto';


select * from DEMO_DB.PRODUCTION_PLAN.NEXT_PLACEMENT_VALUES
select * from DEMO_DB.PRODUCTION_PLAN.MASTER_STRAIN_CLEANER where lower(STRAIN) like '%apex%';

--update DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW



__INDEX__,FACILITY,ROOM,PREDICTED_PLACEMENT_DATE,START_PLACEMENT,PLANT_PLACEMENT,PREDICTED_HARVEST_DATE,HARVEST_START,HARVEST_DATE,READY_FOR_SALE,STRAIN,PLACEMENT_COUNT,COUNT,PREDICTED_NEXT_PLACEMENT_DATE,Yield_Mod,TRIGGER_DATE_1,TRIGGER_DATE_2,TRIGGER_DATE_3,STRAIN_TYPE,CLONE,VEGETATIVE,SOURCE,CULTIVATION_ENVIRONMENT,ROOM_NAME_ORIGINAL
,Encanto,Room G,2020-01-16,2020-01-16,2020-01-16,2020-03-19,,,2020-04-09,Sunset Sherbet,95,95,2020-03-21,1,,,,Hybrid,,,Production Tool,Indoor,Indoor Flower G


select * from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW where FACILITY = 'Joliet' and room in ('131','133') and HARVEST_DATE is
    null;

--update DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW
--set HARVEST_START = '2020-01-15', HARVEST_DATE = '2020-01-15'
--where FACILITY = 'Joliet'
--and room = '131'
--and PREDICTED_PLACEMENT_DATE = '2019-11-13'
--and HARVEST_DATE is null;

select  PLANT_ID, max(HARVEST_ROOM_NAME) from ANALYTICS_DB.CULTIVATION.PLANT_YIELDS where HARVESTGROUPID = '1543' and LOCATION = 'Joliet' group by plant_id
select PLANT_ID, max(HARVEST_ROOM_NAME), max(HARVESTGROUPID)
from ANALYTICS_DB.CULTIVATION.PLANT_YIELDS where PLANT_ID in (select distinct plant_id from ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS where PLACEMENTGROUP = 'JOL-1332019-11-13') group by plant_id

select distinct PLANT_ID,WET_WEIGHT, BUD_WEIGHT, YIELD, TYPE_OF_HARVEST, strain from ANALYTICS_DB.CULTIVATION.PLANT_YIELDS where PLANT_ID in (select distinct plant_id from ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS where PLACEMENTGROUP = 'JOL-1332019-11-13') and YIELD >= .9999

select distinct ROOM_NUMBER, LOCATION, ROOM_CANOPY from ANALYTICS_DB.BUSINESS.CULTIVATION_YIELDS

--update DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW
--set HARVEST_START = '2020-01-16', HARVEST_DATE = '2020-01-16'
--where FACILITY = 'Joliet'
--and room = '133'
--and START_PLACEMENT = '2019-11-13'
--and HARVEST_DATE is null;

















































----GET COUNTS
select count(*)  from ANALYTICS_DB.CULTIVATION.LEVEL1_INVENTORY  --where parentid is not null
----67,302 Rows
select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY where id = '9755508140362477';
4587460732042893,7258403283195762,2465153758415644
--select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id = ;



"SPLIT_PART(PARENTID, ',', 1)",ID
2410028486412434,4587460732042893

select * from ANALYTICS_DB.CULTIVATION.LEVEL_FINAL where PLACEMENTGROUP = 'JOL-1332019-11-13'

select * from ANALYTICS_DB.CULTIVATION.LEVEL_FINAL where INVENTORY_ID = '7929699745492308'


select distinct INVENTORY_PARENT_ID,*, to_timestamp(SESSIONTIME) from FIVETRAN_DB.BT_JOLIET_PUBLIC.PLANTS where id in (select distinct plant_id from ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS where PLACEMENTGROUP = 'JOL-1322019-10-02')
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.PLANTGROUPS-- where SOURCE_ID in ('7929699745492308');

select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA where PARENT_INVENTORYTYPE like '%14%' --where INVENTORYID is not NULL



select * from ANALYTICS_DB.CULTIVATION.INVENTORY_BATCH_PRODUCT


select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY where INVENTORYPARENTID in ('7979403759845839', '2410028486412434', '7258403283195762', '9755508140362477', '4587460732042893');
ID
4287230914353461
6365556786765545
6108212635369600
6810511348389302
4122894837859537
6334057032188175
7861042798107752
5842954846268400

ID
0075725010656702
0082479862527784
0089118169049308



select * from ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS where PLANT_ID = '0089118169049308'
select * from ANALYTICS_DB.CULTIVATION.BT_PLANT_CYCLES where PLANT_ID = '0089118169049308'
select * from ANALYTICS_DB.CULTIVATION.BT_PLANT_CYCLES where PLANT_ID = '8116235807302144'

select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.PLANTS where HARVESTGROUPID = '1493';--id = '0089118169049308'
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id in ('6865132257621682','5019481994661362');
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.VERSION;
INVENTORY_ID
6865132257621682
5019481994661362


select distinct replace(NEW_VAL['plantid'],'"','') as plantid, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id, new_val['inventorytype'], 'JOL' as LOC  from FIVETRAN_DB.BT_JOLIET_PUBLIC.REPLICATION_HISTORY where
           (PRIMARY_VAL like '%0089118169049308%'
or NEW_VAL like  '%0089118169049308%' or NEW_VAL['plantid'] = '0089118169049308') and
                        TABNAME like '%inventory%' and NEW_VAL['plantid'] like '%,%';

5019481994661362, 6865132257621682

UNION
select distinct replace(NEW_VAL['plantid'],'"','') as plantid, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id, 'LNL' as LOC  from FIVETRAN_DB.BT_LINCOLN_PUBLIC.REPLICATION_HISTORY where
            --(PRIMARY_VAL like '%0089118169049308%'
--or NEW_VAL like  '%0089118169049308%' or NEW_VAL['plantid'] = '0089118169049308') and
                        TABNAME like '%inventory%' and NEW_VAL['plantid'] like '%,%'
UNION
select distinct replace(NEW_VAL['plantid'],'"','') as plantid, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id, 'KKE' as LOC  from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.REPLICATION_HISTORY where
            --(PRIMARY_VAL like '%0089118169049308%'
--or NEW_VAL like  '%0089118169049308%' or NEW_VAL['plantid'] = '0089118169049308') and
                        TABNAME like '%inventory%' and NEW_VAL['plantid'] like '%,%'

;
select * from ANALYTICS_DB.CULTIVATION.LEVEL_FINAL where INVENTORY_ID = '5019481994661362';
PLANTID,INVENTORY_ID
"0075584913048097,0089118169049308,0119521369726588,0140224071628636,0167061135064316,0243635614418267,0331932281054059,0359008841224049,0376495919327077,0564002716503894,0568146269549035,0622956354272598,0653256983093834,0667230992765236,0751945965154704,0765258280016862,0926894477678149,1211700557336358,1236591529769601,1308164073612996,1316967777278463,1321760907043298,1339029328764189,1339357859977763,1347640550824105,1491850056141507,1511697430068472,1550697935767474,1562864612258151,1564469370575255,1595541062331005,1633808856851324,1714365001290723,1740253291377943,1748554343466527,1749136800995931,1769028663102559,1808936313505229,1815305514798511,1846625652827452,1959255802405836,1999283707354923,2009744358313371,2020586014601948,2039622967918095,2114528737994819,2116805903675239,2203287449016246,2251987594035417,2290103796576606,2301679199368975,2358320396563638,2360572398631728,2418785707771625,2493296068440837,2580670589373503,2612276136188813,2646862748863073,2694299289350368,2784384550332231,2807354535533493,2855602182643739,2875468444363990,3002500076178061,3031227466126895,3037135768139728,3049253611638640,3116867738535860,3227668272229068,3249752298728212,3250823587450777,3305172547262743,3324908152548114,3371901721918427,3388951732550050,3412371240721895,3462308173212242,3539918693536417,3570758635882534,3581903926086645,3652752160737928,3684769855674397,3734362465953827,3775683872819362,3952558058669260,3957270931410557,4000843500861183,4022825556816004,4044848595752257,4050308114700501,4051795086650149,4057304080338573,4063928318183961,4103780384753053,4155961127676315,4163302408607168,4219829712290526,4269783383677599,4322434078654973,4334449219547275,4352323690898459,4440503687609416,4519282616727586,4536104561005903,4619141624069867,4675843420696314,4711392855494068,4734205596410464,4742559331959374,4751969043759797,4802802260808669,4806021057218991,4835053195780502,4864336695526564,4916427406330292,4917387045227747,4934043017854213,4956231537625712,4972949873659643,4989743469466273,5020270497889981,5042893281792253,5046335051408036,5114551148515631,5122375583689059,5135048750685124,5150429097347939,5315872033278423,5373701365892891,5405098386252741,5586532686687092,5626344948584075,5653460545246400,5815473229361665,5857561799749710,5893419614123068,5896540802828354,5913188643255156,5915805576120648,5922114691325945,5967591630025206,6052789879144092,6080675463237562,6092169571558377,6112023505895331,6140208476223912,6160644933594426,6197975737485544,6269995043701654,6282904604273758,6305066799890119,6430097482008748,6497617733813818,6546200510806701,6622078236117835,6639179394372570,6671878371999662,6687642499962466,6727342086618737,6790482656757860,6837513126469450,6853001825166139,7050687124415283,7082563777969154,7091001256868828,7091281653609162,7206266543321324,7246416686662168,7256987407682710,7337478311488464,7349186475891221,7356311876538985,7400070918644572,7447111249659994,7459117784893741,7470140537269671,7477579696642186,7489952769255197,7579663864751830,7591620047415924,7670028732052277,7674582149637493,7687203056958619,7735608004891675,7785063011868716,7796192931763541,7797801873112835,7856546457850172,7883170886828930,8033253665486209,8036514376567417,8115894988650518,8339843231059113,8352309377490614,8359654899367471,8509068190013416,8590909066910723,8676500123915477,8685646774320718,8730674056479704,8802010287586025,8880479647666419,8881394223599972,8897725132849192,8979878668348821,9139825426016433,9168962393846955,9236982876501709,9245517244518065,9260884072580395,9266036265971792,9300513769922471,9325359239987376,9423487545202392,9455827697419508,9551370634021664,9567696134801124,9781767004611180,9936378058186336",5019481994661362
"0075584913048097,0089118169049308,0119521369726588,0140224071628636,0167061135064316,0243635614418267,0331932281054059,0359008841224049,0376495919327077,0564002716503894,0568146269549035,0622956354272598,0653256983093834,0667230992765236,0751945965154704,0765258280016862,0926894477678149,1211700557336358,1236591529769601,1308164073612996,1316967777278463,1321760907043298,1339029328764189,1339357859977763,1347640550824105,1491850056141507,1511697430068472,1550697935767474,1562864612258151,1564469370575255,1595541062331005,1633808856851324,1714365001290723,1740253291377943,1748554343466527,1749136800995931,1769028663102559,1808936313505229,1815305514798511,1846625652827452,1959255802405836,1999283707354923,2009744358313371,2020586014601948,2039622967918095,2114528737994819,2116805903675239,2203287449016246,2251987594035417,2290103796576606,2301679199368975,2358320396563638,2360572398631728,2418785707771625,2493296068440837,2580670589373503,2612276136188813,2646862748863073,2694299289350368,2784384550332231,2807354535533493,2855602182643739,2875468444363990,3002500076178061,3031227466126895,3037135768139728,3049253611638640,3116867738535860,3227668272229068,3249752298728212,3250823587450777,3305172547262743,3324908152548114,3371901721918427,3388951732550050,3412371240721895,3462308173212242,3539918693536417,3570758635882534,3581903926086645,3652752160737928,3684769855674397,3734362465953827,3775683872819362,3952558058669260,3957270931410557,4000843500861183,4022825556816004,4044848595752257,4050308114700501,4051795086650149,4057304080338573,4063928318183961,4103780384753053,4155961127676315,4163302408607168,4219829712290526,4269783383677599,4322434078654973,4334449219547275,4352323690898459,4440503687609416,4519282616727586,4536104561005903,4619141624069867,4675843420696314,4711392855494068,4734205596410464,4742559331959374,4751969043759797,4802802260808669,4806021057218991,4835053195780502,4864336695526564,4916427406330292,4917387045227747,4934043017854213,4956231537625712,4972949873659643,4989743469466273,5020270497889981,5042893281792253,5046335051408036,5114551148515631,5122375583689059,5135048750685124,5150429097347939,5315872033278423,5373701365892891,5405098386252741,5586532686687092,5626344948584075,5653460545246400,5815473229361665,5857561799749710,5893419614123068,5896540802828354,5913188643255156,5915805576120648,5922114691325945,5967591630025206,6052789879144092,6080675463237562,6092169571558377,6112023505895331,6140208476223912,6160644933594426,6197975737485544,6269995043701654,6282904604273758,6305066799890119,6430097482008748,6497617733813818,6546200510806701,6622078236117835,6639179394372570,6671878371999662,6687642499962466,6727342086618737,6790482656757860,6837513126469450,6853001825166139,7050687124415283,7082563777969154,7091001256868828,7091281653609162,7206266543321324,7246416686662168,7256987407682710,7337478311488464,7349186475891221,7356311876538985,7400070918644572,7447111249659994,7459117784893741,7470140537269671,7477579696642186,7489952769255197,7579663864751830,7591620047415924,7670028732052277,7674582149637493,7687203056958619,7735608004891675,7785063011868716,7796192931763541,7797801873112835,7856546457850172,7883170886828930,8033253665486209,8036514376567417,8115894988650518,8339843231059113,8352309377490614,8359654899367471,8509068190013416,8590909066910723,8676500123915477,8685646774320718,8730674056479704,8802010287586025,8880479647666419,8881394223599972,8897725132849192,8979878668348821,9139825426016433,9168962393846955,9236982876501709,9245517244518065,9260884072580395,9266036265971792,9300513769922471,9325359239987376,9423487545202392,9455827697419508,9551370634021664,9567696134801124,9781767004611180,9936378058186336",6865132257621682
"0075584913048097,0089118169049308,0119521369726588,0140224071628636,0167061135064316,0243635614418267,0331932281054059,0359008841224049,0376495919327077,0564002716503894,0568146269549035,0622956354272598,0653256983093834,0667230992765236,0751945965154704,0765258280016862,0926894477678149,1211700557336358,1236591529769601,1308164073612996,1316967777278463,1321760907043298,1339029328764189,1339357859977763,1347640550824105,1491850056141507,1511697430068472,1550697935767474,1562864612258151,1564469370575255,1595541062331005,1633808856851324,1714365001290723,1740253291377943,1748554343466527,1749136800995931,1769028663102559,1808936313505229,1815305514798511,1846625652827452,1959255802405836,1999283707354923,2009744358313371,2020586014601948,2039622967918095,2114528737994819,2116805903675239,2203287449016246,2251987594035417,2290103796576606,2301679199368975,2358320396563638,2360572398631728,2418785707771625,2493296068440837,2580670589373503,2612276136188813,2646862748863073,2694299289350368,2784384550332231,2807354535533493,2855602182643739,2875468444363990,3002500076178061,3031227466126895,3037135768139728,3049253611638640,3116867738535860,3227668272229068,3249752298728212,3250823587450777,3305172547262743,3324908152548114,3371901721918427,3388951732550050,3412371240721895,3462308173212242,3539918693536417,3570758635882534,3581903926086645,3652752160737928,3684769855674397,3734362465953827,3775683872819362,3952558058669260,3957270931410557,4000843500861183,4022825556816004,4044848595752257,4050308114700501,4051795086650149,4057304080338573,4063928318183961,4103780384753053,4155961127676315,4163302408607168,4219829712290526,4269783383677599,4322434078654973,4334449219547275,4352323690898459,4440503687609416,4519282616727586,4536104561005903,4619141624069867,4675843420696314,4711392855494068,4734205596410464,4742559331959374,4751969043759797,4802802260808669,4806021057218991,4835053195780502,4864336695526564,4916427406330292,4917387045227747,4934043017854213,4956231537625712,4972949873659643,4989743469466273,5020270497889981,5042893281792253,5046335051408036,5114551148515631,5122375583689059,5135048750685124,5150429097347939,5315872033278423,5373701365892891,5405098386252741,5586532686687092,5626344948584075,5653460545246400,5815473229361665,5857561799749710,5893419614123068,5896540802828354,5913188643255156,5915805576120648,5922114691325945,5967591630025206,6052789879144092,6080675463237562,6092169571558377,6112023505895331,6140208476223912,6160644933594426,6197975737485544,6269995043701654,6282904604273758,6305066799890119,6430097482008748,6497617733813818,6546200510806701,6622078236117835,6639179394372570,6671878371999662,6687642499962466,6727342086618737,6790482656757860,6837513126469450,6853001825166139,7050687124415283,7082563777969154,7091001256868828,7091281653609162,7206266543321324,7246416686662168,7256987407682710,7337478311488464,7349186475891221,7356311876538985,7400070918644572,7447111249659994,7459117784893741,7470140537269671,7477579696642186,7489952769255197,7579663864751830,7591620047415924,7670028732052277,7674582149637493,7687203056958619,7735608004891675,7785063011868716,7796192931763541,7797801873112835,7856546457850172,7883170886828930,8033253665486209,8036514376567417,8115894988650518,8339843231059113,8352309377490614,8359654899367471,8509068190013416,8590909066910723,8676500123915477,8685646774320718,8730674056479704,8802010287586025,8880479647666419,8881394223599972,8897725132849192,8979878668348821,9139825426016433,9168962393846955,9236982876501709,9245517244518065,9260884072580395,9266036265971792,9300513769922471,9325359239987376,9423487545202392,9455827697419508,9551370634021664,9567696134801124,9781767004611180,9936378058186336",8192087467702781
"0075584913048097,0089118169049308,0119521369726588,0140224071628636,0167061135064316,0243635614418267,0331932281054059,0359008841224049,0376495919327077,0564002716503894,0568146269549035,0622956354272598,0653256983093834,0667230992765236,0751945965154704,0765258280016862,0926894477678149,1211700557336358,1236591529769601,1308164073612996,1316967777278463,1321760907043298,1339029328764189,1339357859977763,1347640550824105,1491850056141507,1511697430068472,1550697935767474,1562864612258151,1564469370575255,1595541062331005,1633808856851324,1714365001290723,1740253291377943,1748554343466527,1749136800995931,1769028663102559,1808936313505229,1815305514798511,1846625652827452,1959255802405836,1999283707354923,2009744358313371,2020586014601948,2039622967918095,2114528737994819,2116805903675239,2203287449016246,2251987594035417,2290103796576606,2301679199368975,2358320396563638,2360572398631728,2418785707771625,2493296068440837,2580670589373503,2612276136188813,2646862748863073,2694299289350368,2784384550332231,2807354535533493,2855602182643739,2875468444363990,3002500076178061,3031227466126895,3037135768139728,3049253611638640,3116867738535860,3227668272229068,3249752298728212,3250823587450777,3305172547262743,3324908152548114,3371901721918427,3388951732550050,3412371240721895,3462308173212242,3539918693536417,3570758635882534,3581903926086645,3652752160737928,3684769855674397,3734362465953827,3775683872819362,3952558058669260,3957270931410557,4000843500861183,4022825556816004,4044848595752257,4050308114700501,4051795086650149,4057304080338573,4063928318183961,4103780384753053,4155961127676315,4163302408607168,4219829712290526,4269783383677599,4322434078654973,4334449219547275,4352323690898459,4440503687609416,4519282616727586,4536104561005903,4619141624069867,4675843420696314,4711392855494068,4734205596410464,4742559331959374,4751969043759797,4802802260808669,4806021057218991,4835053195780502,4864336695526564,4916427406330292,4917387045227747,4934043017854213,4956231537625712,4972949873659643,4989743469466273,5020270497889981,5042893281792253,5046335051408036,5114551148515631,5122375583689059,5135048750685124,5150429097347939,5315872033278423,5373701365892891,5405098386252741,5586532686687092,5626344948584075,5653460545246400,5815473229361665,5857561799749710,5893419614123068,5896540802828354,5913188643255156,5915805576120648,5922114691325945,5967591630025206,6052789879144092,6080675463237562,6092169571558377,6112023505895331,6140208476223912,6160644933594426,6197975737485544,6269995043701654,6282904604273758,6305066799890119,6430097482008748,6497617733813818,6546200510806701,6622078236117835,6639179394372570,6671878371999662,6687642499962466,6727342086618737,6790482656757860,6837513126469450,6853001825166139,7050687124415283,7082563777969154,7091001256868828,7091281653609162,7206266543321324,7246416686662168,7256987407682710,7337478311488464,7349186475891221,7356311876538985,7400070918644572,7447111249659994,7459117784893741,7470140537269671,7477579696642186,7489952769255197,7579663864751830,7591620047415924,7670028732052277,7674582149637493,7687203056958619,7735608004891675,7785063011868716,7796192931763541,7797801873112835,7856546457850172,7883170886828930,8033253665486209,8036514376567417,8115894988650518,8339843231059113,8352309377490614,8359654899367471,8509068190013416,8590909066910723,8676500123915477,8685646774320718,8730674056479704,8802010287586025,8880479647666419,8881394223599972,8897725132849192,8979878668348821,9139825426016433,9168962393846955,9236982876501709,9245517244518065,9260884072580395,9266036265971792,9300513769922471,9325359239987376,9423487545202392,9455827697419508,9551370634021664,9567696134801124,9781767004611180,9936378058186336",1915481289253527


select * from ANALYTICS_DB.CULTIVATION.PLANT_YIELDS where PLANT_ID = '0089118169049308'

select to_timestamp(SESSIONTIME),* from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id = '6865132257621682'

--Update
select *,a.Harvest_Start = ly.BEGIN_HARVEST_DATE, a.Harvest_Date = ly.end_harvest_date
from
"DEMO_DB"."PRODUCTION_PLAN"."PLACEMENT_NEW" a
left join
(select a.BEGIN_HARVEST_DATE, a.END_HARVEST_DATE, a.room, a.FACILITY  from DEMO_DB.PRODUCTION_PLAN.MITTO_USER_HARVEST a
   group by  a.BEGIN_HARVEST_DATE, a.END_HARVEST_DATE, a.room, a.FACILITY) ly
where a.FACILITY = ly.FACILITY
and a.room = ly.room
and concat(a.FACILITY, a.room, a.START_PLACEMENT) in (select concat(facility,room, min(START_PLACEMENT)) from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW where HARVEST_DATE is null group by facility, room)
and a.harvest_date is null;






select a.BEGIN_HARVEST_DATE, a.END_HARVEST_DATE, a.room, a.FACILITY  from DEMO_DB.PRODUCTION_PLAN.MITTO_USER_HARVEST a
   group by  a.BEGIN_HARVEST_DATE, a.END_HARVEST_DATE, a.room, a.FACILITY

(select concat(facility,room, min(START_PLACEMENT)) from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW where HARVEST_DATE is null group by facility, room)

select concat(facility,room, min(START_PLACEMENT)) from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW where HARVEST_DATE is null group by facility, room




set room = Case when Facility = 'Encanto' and left(room, 2 ) = 'GH' THEN TRIM(CONCAT('Room ', LEFT(room, 2) ))
    WHEN Facility = 'Encanto'  and left(room, 2 ) <> 'GH' and room not like '%Room%' THEN TRIM(CONCAT('Room ', RIGHT(room, 1) ))
WHEN Facility = 'Lincoln' and room like '%Zone%' THEN TRIM(CONCAT('Bay',TRIM(RIGHT(room, 2))))
    WHEN  (Facility = 'Lincoln' and room not like '%Zone%' and room not like '%Bay%') THEN TRIM(CONCAT('Bay',LEFT(TRIM(room),1)))
WHEN Facility = 'Kankakee' and (room like '%FH%' or room like '%BH%') and room not like '%Flower%' THEN TRIM(CONCAT('Flower ', room)) WHEN  Facility = 'Kankakee' and room like '%Mini%' THEN 'Mini Bloom'
WHEN Facility = 'Brookville' and room like '%224%' THEN 'Flower 1-224' WHEN  Facility = 'Brookville' and room like '%227%' THEN 'Flower 2-227' WHEN  Facility = 'Brookville' and room like '%222%' THEN 'Flower 3-222' WHEN  Facility = 'Brookville' and room like '%226%' THEN 'Flower 4-226' WHEN  Facility = 'Brookville' and room like '%220%' THEN 'Flower 5-220' WHEN  Facility = 'Brookville' and room like '%225%' THEN 'Flower 6-225' WHEN  Facility = 'Brookville' and room like '%217%' THEN 'Flower 7-217' WHEN Facility = 'Brookville' and room like '%GH1%' THEN TRIM(CONCAT('GH1','-','Bay',RIGHT(room, 1)))
When Facility = 'Fall River' and room like '%Flower House%' THEN TRIM(CONCAT('FR ', right(room, 1)))
WHEN Facility = 'Vicksburg' and room like '%South %' THEN 'South Field'
WHEN Facility = 'Yellow Springs' and room like '%Indoor Flower%' and (room like '%FH%' or room like '%BH%') THEN TRIM(CONCAT(case when room like '%FH%' THEN 'Indr Flwer ' ELSE 'Indr Flwr ' END,RIGHT(room, 2), CASE WHEN room LIKE '%FH%' THEN ' (T1-8)' ELSE ' (T9-16)' END))
WHEN Facility in ('Carpenteria','Carpinteria') THEN TRIM(RIGHT(TRIM(room), 4))
    when Facility = 'Joliet' THEN TRIM(CAST(room as INT)) ELSE TRIM(room) END


select distinct Case when Facility = 'Encanto' and left(room_name_original, 2 ) = 'GH' THEN TRIM(CONCAT('Room ', LEFT(room_name_original, 2) ))
    WHEN Facility = 'Encanto'  and left(room_name_original, 2 ) <> 'GH' and room_name_original not like '%Room%' THEN TRIM(CONCAT('Room ', RIGHT(room_name_original, 1) ))
WHEN Facility = 'Lincoln' and room_name_original like '%Zone%' THEN TRIM(CONCAT('Bay',TRIM(RIGHT(room_name_original, 2))))
    WHEN  (Facility = 'Lincoln' and room_name_original not like '%Zone%' and room_name_original not like '%Bay%') THEN TRIM(CONCAT('Bay',LEFT(TRIM(room_name_original),1)))
WHEN Facility = 'Kankakee' and (room_name_original like '%FH%' or room_name_original like '%BH%') and room_name_original not like '%Flower%' THEN TRIM(CONCAT('Flower ', room_name_original)) WHEN  Facility = 'Kankakee' and room_name_original like '%Mini%' THEN 'Mini Bloom'
WHEN Facility = 'Brookville' and room_name_original like '%224%' THEN 'Flower 1-224' WHEN  Facility = 'Brookville' and room_name_original like '%227%' THEN 'Flower 2-227' WHEN  Facility = 'Brookville' and room_name_original like '%222%' THEN 'Flower 3-222' WHEN  Facility = 'Brookville' and room_name_original like '%226%' THEN 'Flower 4-226' WHEN  Facility = 'Brookville' and room_name_original like '%220%' THEN 'Flower 5-220' WHEN  Facility = 'Brookville' and room_name_original like '%225%' THEN 'Flower 6-225' WHEN  Facility = 'Brookville' and room_name_original like '%217%' THEN 'Flower 7-217' WHEN Facility = 'Brookville' and room_name_original like '%GH1%' THEN TRIM(CONCAT('GH1','-','Bay',RIGHT(room_name_original, 1)))
When Facility = 'Fall River' and room_name_original like '%Flower House%' THEN TRIM(CONCAT('FR ', right(room_name_original, 1)))
WHEN Facility = 'Vicksburg' and room_name_original like '%South %' THEN 'South Field'
WHEN Facility = 'Yellow Springs' and room_name_original like '%Indoor Flower%' and (room_name_original like '%FH%' or room_name_original like '%BH%') THEN TRIM(CONCAT(case when room_name_original like '%FH%' THEN 'Indr Flwer ' ELSE 'Indr Flwr ' END,RIGHT(room_name_original, 2), CASE WHEN room_name_original LIKE '%FH%' THEN ' (T1-8)' ELSE ' (T9-16)' END))
WHEN Facility in ('Carpenteria','Carpinteria') THEN TRIM(RIGHT(TRIM(room_name_original), 4))
    when Facility = 'Joliet' THEN TRIM(CAST(room_name_original as INT)) ELSE TRIM(room_name_original) END,room, room_name_original from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW where FACILITY = 'Encanto'
---Indoor Flower G
select * from DEMO_DB.PRODUCTION_PLAN.PLACEMENT_NEW where FACILITY = 'Encanto' -- room = 'Indoor Flower G'  -- where HARVEST_DATE is null
---TEST START OF INVENTORY
Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL1_INVENTORY as
select distinct replace(NEW_VAL['plantid'],'"','') as plantid, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id, 'JOL' as LOC  from FIVETRAN_DB.BT_JOLIET_PUBLIC.REPLICATION_HISTORY where
            --(PRIMARY_VAL like '%0089118169049308%'
--or NEW_VAL like  '%0089118169049308%' or NEW_VAL['plantid'] = '0089118169049308') and
                        TABNAME like '%inventory%' and NEW_VAL['plantid'] like '%,%'
UNION
select distinct replace(NEW_VAL['plantid'],'"','') as plantid, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id, 'LNL' as LOC  from FIVETRAN_DB.BT_LINCOLN_PUBLIC.REPLICATION_HISTORY where
            --(PRIMARY_VAL like '%0089118169049308%'
--or NEW_VAL like  '%0089118169049308%' or NEW_VAL['plantid'] = '0089118169049308') and
                        TABNAME like '%inventory%' and NEW_VAL['plantid'] like '%,%'
UNION
select distinct replace(NEW_VAL['plantid'],'"','') as plantid, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id, 'KKE' as LOC  from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.REPLICATION_HISTORY where
            --(PRIMARY_VAL like '%0089118169049308%'
--or NEW_VAL like  '%0089118169049308%' or NEW_VAL['plantid'] = '0089118169049308') and
                        TABNAME like '%inventory%' and NEW_VAL['plantid'] like '%,%'

;











select count(distinct inventory_id) from ANALYTICS_DB.CULTIVATION.LEVEL1_INVENTORY



Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL1_INVENTORY as
    select PLANTID, INVENTORY_ID,PLANT_ID_Original,  dd.PLACEMENTGROUP, dd.ROOM_NBR_TAB as Room_Number, dd.ROOM_FRONT_BACK from
    (select PLANTID, INVENTORY_ID, trim(f.value, '"') as PLANT_ID_Original
   from
 (select  cast(SPLIT(cast(replace(NEW_VAL['plantid'],'"','') as varchar), ',') as ARRAY) as PLANTID, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id
from FIVETRAN_DB.BT_JOLIET_PUBLIC.REPLICATION_HISTORY where
                        TABNAME like '%inventory%' and LENGTH(NEW_VAL['plantid']) > 0    UNION
select  cast(SPLIT(cast(replace(NEW_VAL['plantid'],'"','') as varchar), ',') as ARRAY) as PLANTID, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.REPLICATION_HISTORY where
                        TABNAME like '%inventory%' and LENGTH(NEW_VAL['plantid']) > 0
     UNION
select  cast(SPLIT(cast(replace(NEW_VAL['plantid'],'"','') as varchar), ',') as ARRAY) as PLANTID, coalesce(replace(NEW_VAL['id'],'"',''),replace(PRIMARY_VAL['f1'],'"','')) as inventory_id from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.REPLICATION_HISTORY where
                        TABNAME like '%inventory%' and LENGTH(NEW_VAL['plantid']) > 0



     ) ly, table(flatten(ly.PLANTID)) f) f
left join ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS dd
on PLANT_ID_Original = dd.PLANT_ID
UNION
    select PLANTID, INVENTORY_ID,PLANT_ID_Original, dd.PLACEMENTGROUP, dd.ROOM_NBR_TAB as Room_Number, dd.ROOM_FRONT_BACK from
    (select PLANTID, INVENTORY_ID, trim(f.value, '"') as PLANT_ID_Original
   from
 (select  cast(SPLIT(cast(plantid as varchar), ',') as ARRAY) as PLANTID, id as inventory_id
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
where plantid is not null
     UNION
 select  cast(SPLIT(cast(plantid as varchar), ',') as ARRAY) as PLANTID, id as inventory_id
 from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
where plantid is not null
     UNION
select  cast(SPLIT(cast(plantid as varchar), ',') as ARRAY) as PLANTID, id as inventory_id
 from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY
where plantid is not null



     ) ly, table(flatten(ly.PLANTID)) f) f
left join ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS dd
on PLANT_ID_Original = dd.PLANT_ID

;

















select NEW_VAL,* from FIVETRAN_DB.BT_JOLIET_PUBLIC.REPLICATION_HISTORY where PRIMARY_VAL like '%8116235807302144%'
or NEW_VAL like '%8116235807302144%' or NEW_VAL like '%Sojay Haze 07/26/2019%'

select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where PLANTID is not null
;

where ID = '6865132257621682'
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYADJUSTMENTS where REASON like '%Sojay%Haze%'
where BATCHNO = 'Sojay Haze 07/26/2019'
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id in (
select split_part(PARENTID, ',', 1) from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id in (
select split_part(PARENTID, ',', 1) from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where
id in (
select split_part(PARENTID, ',', 1) from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id in (
select split_part(PARENTID, ',', 1)  from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id in (
select distinct parentid from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id = '1704212604508051')))));
--distinct CONCAT('(''',REPLACE(parentid, ',', ''' , '''),''')')
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where plantid is null and parentid is null


select * from ANALYTICS_DB.CULTIVATION.LEVEL_FINAL where INVENTORY_ID in ('7979403759845839', '2410028486412434', '7258403283195762') --ORIGINATINGINVID in ('7015458210427573','9475077904371842')

select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY where id = '6151163706369023';
select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA where parentid = '8105799502013221'

select count(distinct inventory_id), LOC from ANALYTICS_DB.CULTIVATION.LEVEL_FINAL group  by loc
ID
7258403283195762
1905620673291412

select count(*) from ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY where INVENTORY_ID = '1905620673291412'; --group by loc
--8156

COUNT(DISTINCT INVENTORY_ID),LOC
710,JOL
1090,KKE
3429,LNL


select count(distinct INVENTORY_ID), loc from ANALYTICS_DB.cultivation.LEVEL_FINAL group by loc

Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL1_INVENTORY as

    select PLANTID, INVENTORY_ID,parentid,PLANT_ID_Original,weight, REMAININGWEIGHT, TRANSFERREDOUT, TRANSFERREDOUTTIME, f.Strain, inventorytype,SessionDate, dd.PLACEMENTGROUP, dd.ROOM_NBR_TAB as Room_Number, dd.ROOM_FRONT_BACK, k.roomname from
    (select PLANTID, INVENTORY_ID, PARENTID, trim(f.value, '"') as PLANT_ID_Original,weight, REMAININGWEIGHT, TRANSFERREDOUT, TRANSFERREDOUTTIME, Strain, inventorytype, cast(SessionDate as Date) as SessionDate, CURRENTROOM
   from
 (select  cast(SPLIT(cast(plantid as varchar), ',') as ARRAY) as PLANTID, id as inventory_id, PARENTID, INVENTORYPARENTID,Weight, REMAININGWEIGHT, TRANSFERREDOUT, TRANSFERREDOUTTIME, Strain, to_timestamp(SESSIONTIME) as SessionDate, inventorytype, CURRENTROOM
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
where plantid is not null
     UNION
 select  cast(SPLIT(cast(plantid as varchar), ',') as ARRAY) as PLANTID, id as inventory_id, PARENTID, INVENTORYPARENTID,Weight, REMAININGWEIGHT, TRANSFERREDOUT, TRANSFERREDOUTTIME, Strain, to_timestamp(SESSIONTIME) as SessionDate, inventorytype, CURRENTROOM
 from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
where plantid is not null
     UNION
select  cast(SPLIT(cast(plantid as varchar), ',') as ARRAY) as PLANTID, id as inventory_id, PARENTID, INVENTORYPARENTID,Weight, REMAININGWEIGHT, TRANSFERREDOUT, TRANSFERREDOUTTIME, Strain, to_timestamp(SESSIONTIME) as SessionDate, inventorytype, CURRENTROOM
 from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY
where plantid is not null



     ) ly, table(flatten(ly.PLANTID)) f) f
left join ANALYTICS_DB.CULTIVATION.PLANT_PLACEMENT_GROUPS dd
on PLANT_ID_Original = dd.PLANT_ID
left join FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS k
on CURRENTROOM = k.id

;


Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY as
select g.id as inventory_id, g.id as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select *, 'JOL' as LOC
      from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
      UNION
      select * , 'LNL' as LOC
      from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY
      UNION
      select *, 'KKE' as LOC
      from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     )

    g
left join ANALYTICS_DB.CULTIVATION.LEVEL1_INVENTORY f
on f.inventory_id = g.id
    or f.INVENTORY_ID = g.INVENTORYPARENTID
    --or concat('%',coalesce(g.INVENTORYPARENTID, g.id), '%') like f.parentid



left join (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
    UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
    UNION
    select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA
    ) fh on
       CASE WHEN fh.parentid like '%,%' THEN
        array_contains(g.id::variant, SPLIT(fh.parentid,',' )) = True
        ELSE g.id = fh.parentid end

left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS) k
on g.CURRENTROOM = k.id
and g.LOC = k.LOC

where f.inventory_id is not null /*and g.INVENTORYTYPE in (12,13,14,6,9)*/
group by g.id , g.id ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.LOC, LEFT(to_timestamp(g.created),10);


alter table ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;



alter table ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Working%' and InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
add column TestResults1 string;



update ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select parentid as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;




update ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;





Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt from (select *, 'JOL' as LOC
      from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
      UNION
      select * , 'LNL' as LOC
      from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY
      UNION
      select *, 'KKE' as LOC
      from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     ) g

left join ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY f

on case when g.parentid like '%,%' THEN (array_contains(f.inventory_id::variant, split(g.parentid, ',' )) = True or array_contains(f.conversionid::variant, split(g.id, ',' )) = True) ELSE f.inventory_id = g.parentid END
left join (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA) fh on  CASE WHEN fh.parentid like '%,%' THEN
        array_contains(g.id::variant, SPLIT(fh.parentid,',' )) = True
        ELSE g.id = fh.parentid end
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS) k
on g.CURRENTROOM = k.id
and g.LOC = k.LOC
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10);

alter table ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Working%' and InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
add column TestResults1 string;



update ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select parentid as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;




update ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;






Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) ;





alter table ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;




alter table ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select parentid as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;

update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select INVENTORYPARENTID as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.sample_id;



update ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;































Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10);

alter table ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select id as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;


update ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;

Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc,LEFT(to_timestamp(g.created),10);

alter table ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;




alter table ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select id as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;


update ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;

Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10);


alter table ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;




alter table ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select id as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;


update ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;




Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) ;


alter table ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;




alter table ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select id as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;


update ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;



Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10);


alter table ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;




alter table ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select id as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;


update ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;

Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY as
select g.id as inventory_id, f.OriginatingInvID as OriginatingInvID,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date) as SessionDate, max(f.placementgroup) as placementgroup, max(Room_Number) as Room_number, max(room_front_back) as room_front_back, max(k.roomname) as InventoryRoom_Name, CONCAT(' ',cast(g.productid as string), ' ') as PRODUCTID, g.QUANTITY, g.LASTACTION,min(fh.Quantity) as Converted_Final_weiht2, max(fh.QUANTITY) as Converted_Final_Weight, fh.WASTE, min(fh.PARENT_QUANTITY_OLD) as Start_Quantity, max(fh.PARENT_QUANTITY_OLD) as end_quantity, min(INVENTORYID) as ConversionID, g.deleted, g.loc, LEFT(to_timestamp(g.created),10) as Created_Dt


from (select * from    (select *, trim(f.value, '"') as parentid_Join2
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'JOL' as LOC
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'KKE' as LOC from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *, 'LNL' as LOC from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY



     ) ly, table(flatten(ly.parentid_join)) f) f

     ) g




left join ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY f
on
 f.inventory_id = g.parentid_join2
left join (select * from    (select *, trim(f.value, '"') as parentid_Join3
   from
 (select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, *
 from
FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYCONVERSIONS_WA
     UNION
select  cast(SPLIT(cast(parentid as varchar), ',') as ARRAY) as parentid_join, * from
FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYCONVERSIONS_WA



     ) ly, table(flatten(ly.parentid_join)) f) f
) fh on
 g.id = fh.parentid_Join3
left join (select *, 'JOL' as LOC from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORYROOMS UNION select *, 'LNL' as LOC from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORYROOMS UNION select *, 'KKE' as LOC from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORYROOMS ) k
on g.CURRENTROOM = k.id
and g.loc = k.loc
where (f.inventory_id is not null or f.conversionid is not null)
and f.inventory_id <> g.id
group by g.id , f.OriginatingInvID ,g.weight,g.SAMPLE_ID, g.REMAININGWEIGHT, g.TRANSFERREDOUT, g.TRANSFERREDOUTTIME, g.Strain, g.inventorytype, cast(to_timestamp(g.Sessiontime) as Date),  CONCAT(' ',cast(g.productid as string), ' '), g.QUANTITY,  g.LASTACTION,  fh.WASTE, g.deleted, g.loc, LEFT(to_timestamp(g.created),10);


alter table ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
add column batchno string;

update ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY a
set a.batchno = b.batchno
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;

alter table ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
add column inventorystatus string;

update ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY a
set a.inventorystatus = b.inventorystatus
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;




alter table ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
add column packageweight string;

update ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY a
set a.packageweight = b.packageweight
from (select * from FIVETRAN_DB.BT_JOLIET_PUBLIC.INVENTORY
UNION
    select * from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.INVENTORY
UNION
select * from FIVETRAN_DB.BT_LINCOLN_PUBLIC.INVENTORY) b
where a.inventory_id = b.id;


alter table ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
add column RoomType string;

update ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
set roomtype = case when InventoryRoom_Name like '%Cure Room%' THEN 'Dry Flower Lot'
when InventoryRoom_Name like '%Waste%' THEN 'Waste Lot'
when InventoryRoom_Name like '%Freeze%' THEN 'Fresh Frozen Lot'
when InventoryRoom_Name like '%BHO%' THEN 'BHO Lot'
when InventoryRoom_Name like '%CO2%' THEN 'CO2 Lot'
when InventoryRoom_Name like '%Ethanol%' THEN 'Ethanol Lot'
when InventoryRoom_Name like '%Extraction%' and InventoryRoom_Name like '%Vault%' THEN 'Extraction Lot'
when InventoryRoom_Name like '%Roman%' and InventoryRoom_Name like '%Vault%' THEN 'Roman Candle Lot'
when InventoryRoom_Name like '%Testing%' and InventoryRoom_Name like '%Vault%' THEN 'Tested Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Mixed/Oils Lot'
when InventoryRoom_Name like '%Cold Room%' and InventoryRoom_Name like '%+%' THEN 'Intermediate Edibles Lot'
when InventoryRoom_Name like '%Extract%' and InventoryRoom_Name like '%-%' THEN 'Extraction Stage Lot'

when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%!%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%Vault%' and InventoryRoom_Name like '%**%' THEN 'PackoutRetailer Lot'
when InventoryRoom_Name like '%-%' and left(InventoryRoom_Name,1) in ('5','4','6','3','2','1') THEN 'PackoutRetailer Lot'


when InventoryRoom_Name like '%Working%' or InventoryRoom_Name like '%Flower Vault%' THEN 'Dry Flower Lot'
    ELSE NULL END;

alter table ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
add column TestResults1 string;




update ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY a
set TestResults1 = case when result = 1 THEN 'Passed' WHEN result = -1 then 'Failed' else 'No Test Results Yet' end
FROM (select id as sample_id, inventoryid, result from FIVETRAN_DB.BT_JOLIET_PUBLIC.BMSI_LABRESULTS_SAMPLES) g
where a.sample_id = g.inventoryid;


update ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY a
set productid = cast(name as String)
FROM (select distinct name,id from (select name,id from FIVETRAN_DB.BT_JOLIET_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_KANKAKEE_PUBLIC.PRODUCTS UNION select name,id from FIVETRAN_DB.BT_LINCOLN_PUBLIC.PRODUCTS) k ) g
where TRIM(a.productid) = g.id;



Create or replace table ANALYTICS_DB.CULTIVATION.LEVEL_FINAL as


    (select *, 'Level1' as Level from ANALYTICS_DB.CULTIVATION.LEVEL1_1_INVENTORY
UNION
select *, 'Level2' as Level from ANALYTICS_DB.CULTIVATION.LEVEL2_INVENTORY
UNION
select *, 'Level3' as level from ANALYTICS_DB.CULTIVATION.LEVEL3_INVENTORY
UNION
select *, 'Level4' as level from ANALYTICS_DB.CULTIVATION.LEVEL4_INVENTORY
UNION
select *, 'level5' as level from ANALYTICS_DB.CULTIVATION.LEVEL5_INVENTORY
UNION
select *, 'level6' as level from ANALYTICS_DB.CULTIVATION.LEVEL6_INVENTORY
UNION
select *, 'level7' as level from ANALYTICS_DB.CULTIVATION.LEVEL7_INVENTORY
UNION
select *, 'level8' as level from ANALYTICS_DB.CULTIVATION.LEVEL8_INVENTORY
UNION
select *, 'level9' as level from ANALYTICS_DB.CULTIVATION.LEVEL9_INVENTORY
    )

;



alter table ANALYTICS_DB.CULTIVATION.LEVEL_FINAL
add column InventoryType_Name String;

update ANALYTICS_DB.CULTIVATION.LEVEL_FINAL a
set a.inventorytype_name = case
when a.inventorytype = 6 then 'Flower Materials Harvested'
when a.inventorytype = 9 then 'Other Materials Harvested'
when a.inventorytype = 13 then 'Flower Lot'
WHEN a.inventorytype = 14 THEN 'Other Materials Lot'
WHEN a.inventorytype = 17 THEN 'Hydrocarbon Wax'
WHEN a.inventorytype = 18 THEN 'CO2 Hash Oil'
WHEN a.inventorytype = 22 THEN 'Solid Marijuana Infused Edible'
WHEN a.inventorytype = 23 THEN 'Liquid Marijuana Infused Edible'
WHEN a.inventorytype = 24 THEN 'Marijuana Extract for Inhalation'
WHEN a.inventorytype = 25 THEN 'Marijuana Infused Topicals'
WHEN a.inventorytype = 27 THEN 'Waste'
WHEN a.inventorytype = 28 THEN 'Useable Marijuana'
WHEN a.inventorytype = 30 THEN 'Marijuana Mix'
WHEN a.inventorytype = 32 THEN 'Marijuana Mix Infused'
WHEN a.inventorytype = 45 THEN 'Liquid Marijuana RSO'
WHEN a.inventorytype = 5 THEN 'Kief'
WHEN a.inventorytype = 10 THEN 'Cannabinoid edibles'
WHEN a.inventorytype = 11 THEN 'Cannabinoid topicals'
WHEN a.inventorytype = 12 THEN 'Transfer Lots'
WHEN a.inventorytype = 15 THEN 'Transdermal Patches'
WHEN a.inventorytype = 21 THEN 'Seeds'
WHEN a.inventorytype = 15 THEN 'Transdermal Patches'
    ELSE CONCAT(a.INVENTORYTYPE, ': No Known Type') END
;


alter table ANALYTICS_DB.CULTIVATION.LEVEL_FINAL
rename column productid to product_name;


create or replace table ANALYTICS_DB.CULTIVATION.BIOTRACK_CURRENT_INVENTORY as
select * from ANALYTICS_DB.CULTIVATION.LEVEL_FINAL where transferredout = 0 and remainingweight > 0 and deleted = 0;



